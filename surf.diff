diff --git a/config.def.h b/config.def.h
index 6d3135e..70a8d90 100644
--- a/config.def.h
+++ b/config.def.h
@@ -32,7 +32,7 @@ static Parameter defconfig[ParameterLast] = {
 	SETV(SpellLanguages,     ((char *[]){ "en_US", NULL })),
 	SETB(StrictSSL,          0),
 	SETB(Style,              1),
-	SETF(ZoomLevel,          1.0),
+	SETF(ZoomLevel,          2.0),
 };
 
 static UriParameters uriparams[] = {
@@ -58,7 +58,7 @@ static WebKitFindOptions findopts = WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE |
 /* DOWNLOAD(URI, referer) */
 #define DOWNLOAD(d, r) { \
         .v = (const char *[]){ "/bin/sh", "-c", \
-             "st -e /bin/sh -c \"curl -g -L -J -O --user-agent '$1'" \
+             "st -e /bin/sh -c \"cd ~/downloads; curl -g -L -J -O --user-agent '$1'" \
              " --referer '$2' -b $3 -c $3 '$0';" \
              " sleep 5;\"", \
              d, useragent, r, cookiefile, NULL \
@@ -106,7 +106,6 @@ static Key keys[] = {
 	{ MODKEY,                GDK_KEY_slash,  spawn,      SETPROP("_SURF_FIND", "_SURF_FIND") },
 
 	{ 0,                     GDK_KEY_Escape, stop,       { 0 } },
-	{ MODKEY,                GDK_KEY_c,      stop,       { 0 } },
 
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_r,      reload,     { .b = 1 } },
 	{ MODKEY,                GDK_KEY_r,      reload,     { .b = 0 } },
@@ -121,15 +120,12 @@ static Key keys[] = {
 	{ MODKEY,                GDK_KEY_k,      scroll,     { .i = 'u' } },
 	{ MODKEY,                GDK_KEY_b,      scroll,     { .i = 'U' } },
 	{ MODKEY,                GDK_KEY_space,  scroll,     { .i = 'D' } },
-	{ MODKEY,                GDK_KEY_i,      scroll,     { .i = 'r' } },
-	{ MODKEY,                GDK_KEY_u,      scroll,     { .i = 'l' } },
+	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_j,      scroll,     { .i = 'r' } },
+	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_k,      scroll,     { .i = 'l' } },
 
-
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_j,      zoom,       { .i = -1 } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_k,      zoom,       { .i = +1 } },
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_q,      zoom,       { .i = 0  } },
 	{ MODKEY,                GDK_KEY_minus,  zoom,       { .i = -1 } },
-	{ MODKEY,                GDK_KEY_plus,   zoom,       { .i = +1 } },
+	{ MODKEY,                GDK_KEY_equal,  zoom,       { .i = +1 } },
 
 	{ MODKEY,                GDK_KEY_p,      clipboard,  { .b = 1 } },
 	{ MODKEY,                GDK_KEY_y,      clipboard,  { .b = 0 } },
@@ -141,7 +137,7 @@ static Key keys[] = {
 
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_a,      togglecookiepolicy, { 0 } },
 	{ 0,                     GDK_KEY_F11,    togglefullscreen, { 0 } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_o,      toggleinspector, { 0 } },
+	{ MODKEY,                GDK_KEY_i,      toggleinspector, { 0 } },
 
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_c,      toggle,     { .i = CaretBrowsing } },
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_f,      toggle,     { .i = FrameFlattening } },
@@ -159,8 +155,16 @@ static Button buttons[] = {
 	/* target       event mask      button  function        argument        stop event */
 	{ OnLink,       0,              2,      clicknewwindow, { .b = 0 },     1 },
 	{ OnLink,       MODKEY,         2,      clicknewwindow, { .b = 1 },     1 },
-	{ OnLink,       MODKEY,         1,      clicknewwindow, { .b = 1 },     1 },
+	{ OnLink,       MODKEY,         1,      clicknewwindow, { .b = 0 },     1 },
 	{ OnAny,        0,              8,      clicknavigate,  { .i = -1 },    1 },
 	{ OnAny,        0,              9,      clicknavigate,  { .i = +1 },    1 },
 	{ OnMedia,      MODKEY,         1,      clickexternplayer, { 0 },       1 },
 };
+
+static SearchEngine searchengines[] = {
+	{ "g", "https://encrypted.google.com/search?q=%s"},
+	{ "w", "https://en.wikipedia.org/w/index.php?search=%s"},
+	{ "h", "https://hackage.haskell.org/packages/search?terms=%s"},
+	{ "c", "https://crates.io/search?q=%s"},
+};
+
diff --git a/surf.c b/surf.c
index 93a1629..19561c6 100644
--- a/surf.c
+++ b/surf.c
@@ -129,6 +129,11 @@ typedef struct {
 } Button;
 
 typedef struct {
+	char *token;
+	char *uri;
+} SearchEngine;
+
+typedef struct {
 	const char *uri;
 	Parameter config[ParameterLast];
 	regex_t re;
@@ -202,6 +207,7 @@ static void responsereceived(WebKitDownload *d, GParamSpec *ps, Client *c);
 static void download(Client *c, WebKitURIResponse *r);
 static void closeview(WebKitWebView *v, Client *c);
 static void destroywin(GtkWidget* w, Client *c);
+static gchar *parseuri(const gchar *uri);
 
 /* Hotkeys */
 static void pasteuri(GtkClipboard *clipboard, const char *text, gpointer d);
@@ -473,11 +479,8 @@ loaduri(Client *c, const Arg *a)
 	    g_str_has_prefix(uri, "file://")  ||
 	    g_str_has_prefix(uri, "about:")) {
 		url = g_strdup(uri);
-	} else if (!stat(uri, &st) && (path = realpath(uri, NULL))) {
-		url = g_strdup_printf("file://%s", path);
-		free(path);
 	} else {
-		url = g_strdup_printf("http://%s", uri);
+		url = parseuri(uri);
 	}
 
 	setatom(c, AtomUri, url);
@@ -1461,6 +1464,22 @@ destroywin(GtkWidget* w, Client *c)
 		gtk_main_quit();
 }
 
+gchar *
+parseuri(const gchar *uri) {
+	guint i;
+
+	for (i = 0; i < LENGTH(searchengines); i++) {
+		if (searchengines[i].token == NULL || searchengines[i].uri == NULL ||
+		    *(uri + strlen(searchengines[i].token)) != ' ')
+			continue;
+		if (g_str_has_prefix(uri, searchengines[i].token))
+			return g_strdup_printf(searchengines[i].uri,
+					       uri + strlen(searchengines[i].token) + 1);
+	}
+
+	return g_strdup_printf("https://%s", uri);
+}
+
 void
 pasteuri(GtkClipboard *clipboard, const char *text, gpointer d)
 {
@@ -1509,7 +1528,7 @@ zoom(Client *c, const Arg *a)
 		webkit_web_view_set_zoom_level(c->view,
 		                               curconfig[ZoomLevel].val.f - 0.1);
 	else
-		webkit_web_view_set_zoom_level(c->view, 1.0);
+		webkit_web_view_set_zoom_level(c->view, 2.0);
 
 	curconfig[ZoomLevel].val.f = webkit_web_view_get_zoom_level(c->view);
 }
@@ -1527,6 +1546,7 @@ scroll(Client *c, const Arg *a)
 	switch (a->i) {
 	case 'd':
 		ev->key.keyval = GDK_KEY_Down;
+		gdk_event_put(ev);
 		break;
 	case 'D':
 		ev->key.keyval = GDK_KEY_Page_Down;
@@ -1542,6 +1562,7 @@ scroll(Client *c, const Arg *a)
 		break;
 	case 'u':
 		ev->key.keyval = GDK_KEY_Up;
+		gdk_event_put(ev);
 		break;
 	}
 
